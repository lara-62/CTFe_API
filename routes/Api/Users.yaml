
  tags:
      name: Users
 
  paths:
   /users/profile/{username}:
     get:
        tags:
        - "Users"
        summary: "Get user by user name"
        produces:
        - "application/json"
        parameters:
        - name: "username"
          in: "path"
          description: "unique username of the user to get"
          required: true
          type: "string"
        responses:
            200:
              description: "successful"
              content:
                 application/json:
                      schema:
                         $ref: '#/components/schemas/User'
            400:
             description: "Invalid username supplied"
            404:
             description: "User not found"
   /users/contests/{username}:
     get:
        tags:
        - "Users"
        summary: "Get all the contest this user participated in"
        produces:
        - "application/json"
        parameters:
        - name: "username"
          in: "path"
          description: "unique username of the user to get"
          required: true
          type: "string"
        - name: "type"
          in: "query"
          description: "type of the contest"
          type: "array"
          content:
               text/plain:
                  schema:
                    type: "array"
                    items:
                       type: "string"
                       enum:
                       - "all"
                       - "private"
                       - "offcial"
                       - "participated"
                       - "organized"
                       default: "all"
          collectionFormat: "multi"
        responses:
            200:
              description: "successful"
              content:
                 application/json:
                      schema:
                         $ref: '#/components/schemas/UserContest'
            400:
             description: "Invalid username supplied"
            404:
             description: "User not found"
   /users/SolvedProblems/{username}:
     get:
        tags:
        - "Users"
        summary: "Get all the problems this user solved or tried"
        produces:
        - "application/json"
        parameters:
        - name: "username"
          in: "path"
          description: "unique username of the user to get"
          required: true
          type: "string"
        - name: "type"
          in: "query"
          description: "type of the problem"
          type: "array"
          content:
               text/plain:
                  schema:
                    type: "array"
                    items:
                       type: "string"
                       enum:
                       - "all"
                       - "solved"
                       - "tried"
                       default: "all"
          collectionFormat: "multi"
        - name: "tags"
          in: "query"
          type: "string"
          description: "tags of the problem"
          collectionFormat: "multi"
          optional: true
        - name: "search_text"
          in: "query"
          type: "string"
          description: "search the problem "
          optional: true
        responses:
            200:
              description: "successful"
              content:
                 application/json:
                      schema:
                         $ref: '#/components/schemas/UserSolvedProblems'
            400:
             description: "Invalid username supplied"
            404:
             description: "User not found"
  components:
   schemas:
      User:
       type: object
       required:
       - username
       - email
       - password
       properties:
           username:
              type: string
              description: username for the user
              example: lara
           email:
              type: string
              description: email for the account
              example: lara62@gmail.com
           password:
              type: string
              description: password for the account
              example: 123456
              minimum: 8
           Firstname:
              type: string
              example: lara
           Lastname:
               type: string
               example: khanom
           location:
               type: string
               example: Dhaka,Bangladesh
           joined:
               type: string       
               example: 2021-01-01
           Rating:
               type: Integer
               example: 500
           Global standing:
               type: Integer
               example: 12
      UserContest: 
        type: array
        items:
           type: object
           required:
            - contest_id
            - contest_name
            - contest_date
            - rank
            - solved
           properties:
            contest_id:
               type: string
               description: contest id
               example: 1234
            contest_name:
               type: string
               description: contest name
               example:  Round #1234
            contest_date:
               type: string
               description: contest date
               example: 2021-01-01
            rank:
               type: Integer
               description: rank of the user
               example: 12
            solved:
               type: Integer
               description: number of solved problems
               example: 12
      UserSolvedProblems:
        type: array
        items:
           type: object
           required:
            - problem_id
            - problem_name
            - problem_solved_date
            - problem_tags
            - contest_name
           properties:
            problem_id:
               type: string
               description: problem id
               example: 1234
            problem_name:
               type: string
               description: problem name
               example: A. Boring Apartments
            problem_tags:
               type: array
               description: problem tags
               example: [crypro]
            contest_name:
               type: string
               description: contest name
               example: Round #1234
            problem_solved_date:
               type: string
               description: problem solved date
               example: 2021-01-01